npm init // initialise the node project
npm i express nodemon mongoose dotenv //use nodemon for hot reload by changing the scripts object to ("start": "nodemon indexx.js")
If saving the main file reload the server, then the app works
Create express app
Establish mongodb nodejs connection
visit cloud.mongodb.com to create account and cluster. Go to database access and create a new user (mymongo==mymongo;mymongo2==mymongo). Go to network access to allow access from anywhere. Go to database and click on CONNECT and Add your connection string into your application code, add your user's username, password and any db name you prefer.
Create a dotenv(.env) file to keep the uri and port as a secret. Require the .env file in the index.js file


Create Routes folder for the various routers, some REST get and post APIs. Use express router

export the Router moudele and Import it in the index.js file 

Test the APIS. Use POSTMAN to test the APIs. To be able to handle json objects in request bodies, use express.json()


Time to make the application dynamic where we create models for our database.

Create the models folder and inside it let's have the user.js, cart.js, product.js and order.js, and also the auth.js to route the register process


Work on the Routes. Also link the routes to index.js

Open postman and test the auth route

Encrypt the password of auth using CryptoJS AES //npm i crypto-js. Import or require CryptoJS inside auth.js. Then test the api to see if new user created has an exrypted password


Now that new users can be registered, the next is to write the route for login for the registered users

Write the login route with password and username verification.

MAke sure to hide the password in the response.

Time to make the application more secure. To do that, we have to use jwt (json web token). This is basically to verify our users and provide them with a json web token //npm i jsonwebtoken

now in the auth.js file, import jwt //const jwt = require('jsonwebtoken');

in same auth.js, generate accessToken for the user after confirming that the user is available in the db with correct credentials //jwt.sign





